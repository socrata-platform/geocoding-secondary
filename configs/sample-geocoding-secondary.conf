com.socrata.coordinator.secondary-watcher = {
  database = {
    app-name = secondary-watcher-geocoding
    database = datacoordinator
    host = localhost
    port = 5432
    username = blist
    password = blist

    c3p0 {
      maxPoolSize = 20
      idleConnectionTestPeriod = 60
      testConnectionOnCheckin = true
      preferredTestQuery = "SELECT 1"
      maxIdleTimeExcessConnections = 300
    }
  }

  instance = primus

  secondary {
    # unused
    defaultGroups = []
    groups { }

    instances {
      geocoding {
        secondaryType = geocoding
        config = ${com.socrata.geocoding-secondary}
        numWorkers = 2
      }
    }
  }

  claim-timeout = 1m
  watcher-id = 61e9a209-98e7-4daa-9c43-5778a96e1d8a

  metrics {
    # Should be unique for each service
    prefix = "com.socrata.data.coordinator"
    log-metrics = false
    enable-graphite = false
  }

  tmpdir = ${java.io.tmpdir}

  message-producer {
    eurybates {
      producers = "activemq"
      activemq.connection-string = "tcp://localhost:61616"
    }

    zookeeper {
      conn-spec = "localhost:2181"
      session-timeout = 4s
    }
  }

  log4j = {
    rootLogger = [ INFO, console ]
    appender {
      console.class = org.apache.log4j.ConsoleAppender
      console.props {
        layout.class = org.apache.log4j.PatternLayout
        layout.props {
          ConversionPattern = "[%t] (%X{job-id}) (%X{X-Socrata-RequestId}) [%X{dataset-id}] %p %c{1} %d %m%n"
        }
      }
    }

    logger.com.socrata = INFO # if you want com.socrata components to log noisely you can change this to DEBUG or TRACE
  }
}

com.socrata.geocoding-secondary {
  cassandra.connection-pool.seeds = [ "127.0.0.1:9160" ]

  curator.ensemble = ["localhost:2181"]

  geocoder.mapquest.app-token = SOME_APP_TOKEN # you will need to find a real MapQuest app token and override this
}